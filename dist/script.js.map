{"version":3,"file":"script.js","mappingssources":["webpack://typefixer/./src/script.js"],"sourcesContent":["const dictionary = {\r\n  cat: [\"dog\", \"rat\", \"bat\"],\r\n  helo: [\"hello\", \"help\", \"hell\"],\r\n  heldp: [\"help\", \"held\", \"hello\"],\r\n};\r\nlet currentWord = \"\";\r\nlet isMenuActive = false;\r\nconst cursorDiv = document.createElement(\"div\");\r\nfunction getCaretCoordinates(inputElement, caretPos) {\r\n  const rect = inputElement.getBoundingClientRect();\r\n  const span = document.createElement(\"span\");\r\n  span.textContent = inputElement.value.substring(0, caretPos);\r\n  document.body.appendChild(span);\r\n\r\n  span.style.whiteSpace = \"pre-wrap\";\r\n  span.style.visibility = \"hidden\";\r\n  span.style.position = \"absolute\";\r\n  span.style.top = \"0\";\r\n  span.style.left = \"0\";\r\n  const spanRect = span.getBoundingClientRect();\r\n  const x = rect.left + spanRect.width;\r\n  const y = rect.top + spanRect.height;\r\n\r\n  document.body.removeChild(span);\r\n\r\n  return { x, y };\r\n}\r\n\r\nfunction getWordBeforeCursor() {\r\n  const activeElement = document.activeElement;\r\n  if (!activeElement) return null;\r\n  const isInputText =\r\n    activeElement.tagName === \"INPUT\" && activeElement.type === \"text\";\r\n  const isTextarea = activeElement.tagName === \"TEXTAREA\";\r\n  const isContenteditable =\r\n    activeElement.getAttribute(\"contenteditable\") === \"true\";\r\n\r\n  if (isInputText || isTextarea) {\r\n    const cursorPosition = activeElement.selectionStart;\r\n    const text = activeElement.value || activeElement.textContent;\r\n    const words = text.substring(0, cursorPosition).trim().split(/\\s+/);\r\n\r\n    cursorDiv.style.top =\r\n      getCaretCoordinates(activeElement, cursorPosition).y - 60 + \"px\";\r\n    cursorDiv.style.left =\r\n      getCaretCoordinates(activeElement, cursorPosition).x - 70 + \"px\";\r\n    return words[words.length - 1];\r\n  } else if (isContenteditable) {\r\n    const selection = window.getSelection();\r\n    const range = selection.getRangeAt(0);\r\n    const rect = range.getBoundingClientRect();\r\n    cursorDiv.style.top = rect.y - 35 + \"px\";\r\n    cursorDiv.style.left = rect.x - 70 + \"px\";\r\n    const wordsBeforeCursor = range.startContainer.textContent\r\n      .substring(0, range.startOffset)\r\n      .trim()\r\n      .split(/\\s+/);\r\n    return wordsBeforeCursor[wordsBeforeCursor.length - 1];\r\n  }\r\n  return null;\r\n}\r\nfunction getWordUnderCursor() {\r\n  const activeElement = document.activeElement;\r\n  if (!activeElement) return null;\r\n  const isInputOrTextarea =\r\n    activeElement.tagName === \"INPUT\" || activeElement.tagName === \"TEXTAREA\";\r\n  const isContenteditable =\r\n    activeElement.getAttribute(\"contenteditable\") === \"true\";\r\n  if (isInputOrTextarea) {\r\n    const cursorPosition = activeElement.selectionStart;\r\n    const text = activeElement.value || activeElement.textContent;\r\n    cursorDiv.style.top =\r\n      getCaretCoordinates(activeElement, cursorPosition).y - 60 + \"px\";\r\n    cursorDiv.style.left =\r\n      getCaretCoordinates(activeElement, cursorPosition).x - 70 + \"px\";\r\n    const words = text.split(/\\s+/).filter((word) => word !== \"\");\r\n    let wordStart = 0;\r\n    let wordEnd = 0;\r\n    const beforeAfterSpaces =\r\n      text[cursorPosition - 1] === \" \" && text[cursorPosition] === \" \";\r\n\r\n    for (let i = 0; i < words.length; i++) {\r\n      wordEnd = wordStart + words[i].length;\r\n      if (cursorPosition >= wordStart && cursorPosition <= wordEnd) {\r\n        if (beforeAfterSpaces) {\r\n          return null;\r\n        }\r\n        return words[i];\r\n      }\r\n      wordStart = wordEnd + 1;\r\n    }\r\n  } else if (isContenteditable) {\r\n    const selection = window.getSelection();\r\n    const range = selection.getRangeAt(0);\r\n    const rect = range.getBoundingClientRect();\r\n    cursorDiv.style.top = rect.y - 35 + \"px\";\r\n    cursorDiv.style.left = rect.x - 70 + \"px\";\r\n    const cursorOffset = range.startOffset;\r\n    const cursorNode = range.startContainer;\r\n    const cursorParentNode = cursorNode.parentNode;\r\n    const textBeforeCursor = cursorParentNode.textContent.substring(\r\n      0,\r\n      cursorOffset\r\n    );\r\n    const textAfterCursor =\r\n      cursorParentNode.textContent.substring(cursorOffset);\r\n    const beforeCursorHasSpace = /\\s$/.test(textBeforeCursor);\r\n    const afterCursorHasSpace = /^\\s/.test(textAfterCursor);\r\n    const wordsBeforeCursor = textBeforeCursor.trim().split(/\\s+/);\r\n    const wordsAfterCursor = textAfterCursor.trim().split(/\\s+/);\r\n\r\n    const beforeAfterSpaces =\r\n      textBeforeCursor.slice(-1) + textAfterCursor.slice(0, 1);\r\n\r\n    if (beforeAfterSpaces === \"Â  \") {\r\n      return null;\r\n    }\r\n    if (beforeCursorHasSpace) {\r\n      return wordsAfterCursor[0].toLowerCase();\r\n    } else if (afterCursorHasSpace) {\r\n      return wordsBeforeCursor[wordsBeforeCursor.length - 1];\r\n    } else {\r\n      return (\r\n        wordsBeforeCursor[wordsBeforeCursor.length - 1] +\r\n        wordsAfterCursor[0].toLowerCase()\r\n      );\r\n    }\r\n  }\r\n  return null;\r\n}\r\nconst openMenu = () => {\r\n  cursorDiv.innerHTML = \"\";\r\n\r\n  isMenuActive = true;\r\n  const activeElement = document.activeElement;\r\n  const isInputOrTextarea =\r\n    activeElement.tagName === \"INPUT\" || activeElement.tagName === \"TEXTAREA\";\r\n  const isContenteditable =\r\n    activeElement.getAttribute(\"contenteditable\") === \"true\";\r\n\r\n  cursorDiv.className = \"Existek\";\r\n  const settings = document.createElement(\"input\");\r\n  settings.className = \"settings\";\r\n  settings.type = \"color\";\r\n  const wordsList = dictionary[currentWord.toLocaleLowerCase()];\r\n  wordsList.forEach((item) => {\r\n    const option = document.createElement(\"button\");\r\n    option.className = \"optionButton\";\r\n    option.innerText = item;\r\n    option.addEventListener(\"click\", () => {\r\n      if (\r\n        currentWord !== null &&\r\n        dictionary.hasOwnProperty(currentWord.toLocaleLowerCase())\r\n      ) {\r\n        if (isInputOrTextarea) {\r\n          replaceInputOrTextarea(item, activeElement);\r\n        } else if (isContenteditable) {\r\n          replaceContentEditable(item, activeElement);\r\n        }\r\n      }\r\n    });\r\n    cursorDiv.appendChild(option);\r\n  });\r\n  if (localStorage.getItem(\"selectedColor\")) {\r\n    cursorDiv.style.backgroundColor = localStorage.getItem(\"selectedColor\");\r\n  }\r\n\r\n  settings.addEventListener(\"input\", (event) => {\r\n    const selectedColor = event.target.value;\r\n    localStorage.setItem(\"selectedColor\", selectedColor);\r\n    cursorDiv.style.backgroundColor = selectedColor;\r\n  });\r\n\r\n  cursorDiv.appendChild(settings);\r\n  document.body.appendChild(cursorDiv);\r\n};\r\nconst closeMenu = () => {\r\n  isMenuActive = false;\r\n  cursorDiv.innerHTML = \"\";\r\n  cursorDiv.remove();\r\n};\r\n\r\nfunction replaceInputOrTextarea(item, activeElement) {\r\n  const cursorPosition = activeElement.selectionStart;\r\n  const inputString = activeElement.value;\r\n  const beforeCursor = inputString.substring(0, cursorPosition);\r\n  const afterCursor = inputString.substring(cursorPosition);\r\n  const hasSpaceBefore = /\\s$/.test(beforeCursor);\r\n  const hasSpaceAfter = /^\\s/.test(afterCursor);\r\n\r\n  const wordsBeforeCursor = beforeCursor\r\n    .split(/\\s/)\r\n    .filter((word) => word !== \"\");\r\n  const wordsAfterCursor = afterCursor\r\n    .split(/\\s/)\r\n    .filter((word) => word !== \"\");\r\n\r\n  if (!hasSpaceBefore && !hasSpaceAfter) {\r\n    wordsBeforeCursor.pop();\r\n    wordsAfterCursor.shift();\r\n  } else if (hasSpaceBefore) {\r\n    wordsAfterCursor.shift();\r\n  } else if (hasSpaceAfter) {\r\n    wordsBeforeCursor.pop();\r\n  }\r\n  const textWithoutNewLines = `${wordsBeforeCursor.join(\r\n    \" \"\r\n  )} ${item} ${wordsAfterCursor.join(\" \")}`;\r\n  const lineBreakPositions = [];\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    if (inputString[i] === \"\\n\") {\r\n      lineBreakPositions.push(i);\r\n    }\r\n  }\r\n  let updatedString = \"\";\r\n  for (let i = 0; i < textWithoutNewLines.length; i++) {\r\n    updatedString += textWithoutNewLines[i];\r\n    if (lineBreakPositions.includes(i + 1)) {\r\n      updatedString += \"\\n\";\r\n      i++;\r\n    }\r\n  }\r\n  activeElement.value = updatedString;\r\n  activeElement.focus();\r\n  activeElement.setSelectionRange(cursorPosition, cursorPosition);\r\n  closeMenu();\r\n}\r\n\r\nfunction replaceContentEditable(item) {\r\n  const selection = window.getSelection();\r\n  const range = selection.getRangeAt(0);\r\n\r\n  const previousCursorPosition = range.startOffset;\r\n\r\n  const textBeforeCursor = range.startContainer.textContent.substring(\r\n    0,\r\n    range.startOffset\r\n  );\r\n  const textAfterCursor = range.startContainer.textContent.substring(\r\n    range.startOffset\r\n  );\r\n\r\n  const wordsBeforeCursor = textBeforeCursor.trim().split(/\\s+/);\r\n  const wordsAfterCursor = textAfterCursor.trim().split(/\\s+/);\r\n  const hasSpaceBefore = textBeforeCursor.endsWith(\" \");\r\n  const hasSpaceAfter = textAfterCursor.startsWith(\" \");\r\n\r\n  if (!hasSpaceBefore && !hasSpaceAfter) {\r\n    wordsBeforeCursor.pop();\r\n    wordsAfterCursor.shift();\r\n  } else if (hasSpaceBefore) {\r\n    wordsAfterCursor.shift();\r\n  } else if (hasSpaceAfter) {\r\n    wordsBeforeCursor.pop();\r\n  }\r\n  wordsBeforeCursor.push(item);\r\n\r\n  const combinedText = wordsBeforeCursor.concat(wordsAfterCursor);\r\n  combinedText[combinedText.length - 1] += \" \";\r\n\r\n  range.startContainer.textContent = combinedText.join(\" \");\r\n\r\n  range.setStart(range.startContainer, previousCursorPosition);\r\n  range.collapse(true);\r\n\r\n  selection.removeAllRanges();\r\n  selection.addRange(range);\r\n  closeMenu();\r\n}\r\n\r\nfunction handleEvent() {\r\n  if (\r\n    currentWord !== null &&\r\n    dictionary.hasOwnProperty(currentWord.toLocaleLowerCase())\r\n  ) {\r\n    openMenu();\r\n  } else if (isMenuActive) {\r\n    closeMenu();\r\n  }\r\n}\r\n\r\nconst bodyEvents = () => {\r\n  const elements = document.querySelectorAll(\r\n    'input[type=\"text\"], textarea, [contenteditable=\"true\"]'\r\n  );\r\n\r\n  elements.forEach((element) => {\r\n    element.addEventListener(\"input\", (event) => {\r\n      if (event.data === \" \") {\r\n        currentWord = getWordUnderCursor();\r\n      }\r\n    });\r\n  });\r\n\r\n  document.addEventListener(\"click\", (e) => {\r\n    console.log(\"click\\n\\n\\n\\n\\n\");\r\n    if (!cursorDiv.contains(e.target)) {\r\n      currentWord = getWordUnderCursor();\r\n      handleEvent();\r\n    }\r\n  });\r\n\r\n  let lastKeyPressed = \"\";\r\n  document.addEventListener(\"keyup\", (event) => {\r\n    console.log(\"button pressed\\n\\n\\n\\n\\n\");\r\n    if (event.code === \"Space\") {\r\n      if (lastKeyPressed === \"Space\") {\r\n        closeMenu();\r\n      } else {\r\n        currentWord = getWordBeforeCursor();\r\n        handleEvent();\r\n      }\r\n    } else if (event.code.includes(\"Arrow\")) {\r\n      currentWord = getWordUnderCursor();\r\n      handleEvent();\r\n    } else if (isMenuActive) {\r\n      closeMenu();\r\n    }\r\n    lastKeyPressed = event.code;\r\n  });\r\n};\r\n\r\nbodyEvents();\r\n"],"names":[],"sourceRoot":""}